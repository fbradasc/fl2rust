// Automatically generated by fl2rust

#![allow(unused_variables)]
#![allow(unused_mut)]
#![allow(unused_imports)]

use fltk::browser::*;
use fltk::button::*;
use fltk::dialog::*;
use fltk::enums::*;
use fltk::frame::*;
use fltk::group::*;
use fltk::image::*;
use fltk::input::*;
use fltk::menu::*;
use fltk::misc::*;
use fltk::output::*;
use fltk::prelude::*;
use fltk::table::*;
use fltk::text::*;
use fltk::tree::*;
use fltk::valuator::*;
use fltk::widget::*;
use fltk::window::*;

#[derive(Debug, Clone)]
pub struct UserInterface {
    pub win: Window,
    pub open_button: Button,
    pub clear_button: Button,
    pub filename: Input,
    pub scroll: Scroll,
}

impl UserInterface {
    pub fn make_window() -> Self {
        let mut win = Window::new(498, 198, 425, 325, "Emit Editor");
        win.end();
        win.set_color(Color::by_index(32));
        win.set_align(unsafe { std::mem::transmute(80) });
        win.make_resizable(true);
        win.show();
        let mut open_button = Button::new(25, 10, 45, 40, "@fileopen");
        open_button.set_frame(FrameType::FlatBox);
        open_button.set_color(Color::by_index(27));
        open_button.set_label_color(Color::by_index(175));
        win.add(&open_button);
        let mut clear_button = Button::new(80, 10, 45, 40, "@filenew");
        clear_button.set_frame(FrameType::FlatBox);
        clear_button.set_color(Color::by_index(27));
        clear_button.set_label_color(Color::by_index(175));
        win.add(&clear_button);
        let mut filename = Input::new(195, 10, 215, 30, "");
        filename.set_color(Color::by_index(54));
        win.add(&filename);
        let mut scroll = Scroll::new(15, 55, 400, 260, "");
        scroll.end();
        scroll.set_frame(FrameType::FlatBox);
        scroll.set_color(Color::by_index(54));
        win.add(&scroll);
        Self {
            win,
            open_button,
            clear_button,
            filename,
            scroll,
        }
    }
}
